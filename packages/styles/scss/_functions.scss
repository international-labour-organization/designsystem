//*------------------------------------*\
//    $FUNCTIONS
//*------------------------------------*/
@use "tokens" as *;
// ======================================
// String Replace
// ======================================
@use "sass:math";

@function str-replace($string: "", $search, $replace: "") {
  @if type-of($string) ==string {
    $index: str-index($string, $search);
    @if $index {
      @return str-slice($string, 1, $index - 1) + $replace +
        str-replace(
          str-slice($string, $index + str-length($search)),
          $search,
          $replace
        );
    }
  }
  @return $string;
}

// ======================================
// Strip Units
//
// Removes units (usually 'px', 'rem' or 'em')
// from a value passed in and returns it as
// a pure integer
// ======================================
@function strip-units($value) {
  @return math.div($value, $value * 0 + 1);
}

// ======================================
// Px-To-Rem
//
// Converts a pixel value to rems
// @param {*} $px - either number or string
// @return {*} - value in rems, with $font-size-default as base
// ======================================
@function px-to-rem($px) {
  @if index($px, "%") {
    @return $px;
  } @else {
    @return math.div(strip-units($px), strip-units($type-base-size)) * 1rem;
  }
}

// =========================================
// Spacing Helper
//
// spacing will be calculated by multiples of 4
// @param {Number} $size - number of times to multiply $padding-root, check tokens/spacing/base.json
// @return {*} - desired size, rounded to nearest integer, multiplied by $padding-base, in rems
// =========================================

@function spacing($size) {
  $scaled: calc(#{$size} * var(--ilo-spacing-base));

  @if ($size % 1 != 0) {
    $scaled: calc(#{round($size)} * var(--ilo-spacing-base));
  }

  @return $scaled;
}

// =========================================
// Encode color strings
//
// Useful for using color variables with inline CSS SVGs
// =========================================
@function colortodataurlicon($name, $color) {
  $icon: map-get($icons, $name);
  $fill: "currentColor";
  $output: str-replace($icon, $fill, $color);
  @return $output;
}

// =========================================
// Adjust a margin to account for line-height
// and font descenders
//
// $descender is the height of the descender
// in pixels when the font is $typesize
// $lineheight is the line-height when
// the font is $typesize
//
// include the second set of values
// if your margin is between two sets
// of text
// =========================================
@function margin-adjust(
  $margin,
  $descender1,
  $lineheight1,
  $typesize1,
  $descender2: 0,
  $lineheight2: 0,
  $typesize2: 0
) {
  $lineHeightScale: math.div($lineheight1, $typesize1);
  $finalval: ($lineHeightScale - 1) + ($descender1 * $typesize1);
  @if $descender2 > 0 and $lineheight2 > 0 and $typesize2 > 0 {
    $lineHeightScale2: math.div($lineheight2, $typesize2);
    $val2: ($lineHeightScale2 - 1) + ($descender2 * $typesize2);
    $finalval: $finalval + $val2;
  }
  $adjusted: $margin - $finalval;
  @return $adjusted;
}
