//*------------------------------------*\
//    $MIXINS
//*------------------------------------*/
@use "tokens" as *;
@use "functions" as *;
@use "theme/breakpoints" as *;

// ======================================
// Output font styles
// ======================================
/// Retrieve the usual font styles for a given type styling
/// @param {String} $stylename - the name of the style to get
/// @return {CSS} font size, line-height, and letter-spacing for this type style
@mixin font-styles($stylename) {
  font-size: map-get($type, $stylename, "size");
  letter-spacing: map-get($type, $stylename, "letter-spacing");
  line-height: map-get($type, $stylename, "line-height");
}

// ======================================
// Visually Hidden
//
// Visually hide the element from the
// screen but still have it accessible
// via screenreaders
//
// ======================================
@mixin isVisuallyHidden() {
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
  position: absolute;
  clip: rect(0 0 0 0);
  overflow: hidden;
}

// ======================================
// Breakpoint
// ======================================

@mixin breakpoint($breakpoint, $max: false) {
  @if map-has-key($breakpoints-foundation, $breakpoint) {
    @if not $max {
      @media screen and (min-width: map-get($breakpoints-foundation, $breakpoint)) {
        @content;
      }
    }

    @if $max {
      @media screen and (max-width: #{map-get($breakpoints-foundation, $breakpoint) - 1px}) {
        @content;
      }
    }
  }
}

// ======================================
// Text Margin
//
// calculates reduced margin to account
// for line-height and descenders
// ======================================

@mixin textmargin(
  $margin,
  $marginval,
  $stylename,
  $descender,
  $stylename2: false,
  $descender2: false
) {
  @if $stylename2 != false {
    #{$margin}: px-to-rem(
      margin-adjust(
        $marginval,
        map-get($type, "descenders", $descender),
        map-get($type, $stylename, "size"),
        map-get($type, $stylename, "line-height")
      )
    );
  } @else {
    #{$margin}: px-to-rem(
      margin-adjust(
        $marginval,
        map-get($type, "descenders", $descender),
        map-get($type, $stylename, "size"),
        map-get($type, $stylename, "line-height"),
        map-get($type, "descenders", $descender2),
        map-get($type, $stylename2, "size"),
        map-get($type, $stylename2, "line-height")
      )
    );
  }
}

// ======================================
// Border Values
// ======================================

@mixin bordervalues($mappath, $location, $state: "default") {
  border-bottom: px-to-rem(
      map-get($spacing, $location, $mappath, $state, "border", "bottom")
    )
    solid map-get($color, $location, $mappath, $state, "border", "bottom");
  border-left: px-to-rem(
      map-get($spacing, $location, $mappath, $state, "border", "left")
    )
    solid map-get($color, $location, $mappath, $state, "border", "left");
  border-right: px-to-rem(
      map-get($spacing, $location, $mappath, $state, "border", "right")
    )
    solid map-get($color, $location, $mappath, $state, "border", "right");
  border-top: px-to-rem(
      map-get($spacing, $location, $mappath, $state, "border", "top")
    )
    solid map-get($color, $location, $mappath, $state, "border", "top");
}

// ======================================
// Border Radius Values
// ======================================

@mixin borderradius($mappath) {
  border-bottom-left-radius: map-get($radius, $mappath, "bottom-left");
  border-bottom-right-radius: map-get($radius, $mappath, "bottom-right");
  border-top-left-radius: map-get($radius, $mappath, "top-left");
  border-top-right-radius: map-get($radius, $mappath, "top-right");
}

// ======================================
// Box Padding Values
// ======================================

@mixin boxpadding($mappath, $size) {
  padding-bottom: map-get($spacing, "boxpadding", $mappath, $size, "bottom");
  padding-left: map-get($spacing, "boxpadding", $mappath, $size, "left");
  padding-right: map-get($spacing, "boxpadding", $mappath, $size, "right");
  padding-top: map-get($spacing, "boxpadding", $mappath, $size, "top");
}

// ======================================
// Data URL Icon
// ======================================

@mixin dataurlicon($name, $color: $color-base-neutrals-black) {
  background-image: url("#{colortodataurlicon($name, $color)}");
  background-repeat: no-repeat;
}

@mixin icon($name, $color: black) {
  $icon: map-get($icons, $name);
  mask-image: url("#{$icon}");
  mask-repeat: no-repeat;
  -webkit-mask-image: url("#{$icon}");
  -webkit-mask-repeat: no-repeat;
  background-color: $color;
}

// ======================================
// Video Button
// ======================================
@mixin videobutton($name, $size: "standard") {
  $height: if($size == "big", 72px, 32px);
  $box: if($size == "big", 80px, 40px);
  $width: $height;
  $color: $color-ux-video-controls-default-icon;

  cursor: pointer;
  border: none;
  background-color: $color-ux-video-controls-default-background;
  width: $box;
  height: $box;
  background-position: center center;
  background-repeat: no-repeat;
  background-size: $width $height;
  @include dataurlicon($name, $color);

  &:hover,
  &:focus {
    background-color: $color-ux-video-controls-hover-background;
    $color: $color-ux-video-controls-hover-icon;
    @include dataurlicon($name, $color);
  }
}

// ======================================
// Link styles
// ======================================

@mixin linkstyles() {
  background: map-get($color, "link", "background", "default");
  color: map-get($color, "link", "text", "default");
  font-size: inherit;
  font-weight: inherit;
  line-height: inherit;
  text-decoration: underline;
  text-underline-offset: px-to-rem(6px);
  text-decoration-thickness: px-to-rem(1.5px);
  text-decoration-color: var(--ilo-color-blue);
  padding-bottom: spacing(1);

  &:visited {
    background: map-get($color, "link", "background", "visited");
    color: map-get($color, "link", "text", "visited");
    text-decoration-color: var(--ilo-color-purple);
  }

  &:hover {
    background: map-get($color, "link", "background", "hover");
    color: map-get($color, "link", "text", "hover");
    text-decoration-thickness: 3px;
    text-decoration-color: var(--ilo-color-blue);
  }

  &:active {
    background: map-get($color, "link", "background", "active");
    color: map-get($color, "link", "text", "active");
    text-decoration-thickness: 3px;
    text-decoration-color: var(--ilo-color-blue-dark);
  }

  &:focus {
    background: map-get($color, "link", "background", "focus");
    color: map-get($color, "link", "text", "focus");
    text-decoration-thickness: 3px;
    text-decoration-color: var(--ilo-color-blue-dark);
  }

  &--dark {
    background: map-get($color, "link", "background-dark", "default");
    color: map-get($color, "link", "text-dark", "default");
    text-decoration-color: var(--ilo-color-gray-light);

    &:visited {
      background: map-get($color, "link", "background-dark", "visited");
      color: map-get($color, "link", "text-dark", "visited");
      text-decoration-color: var(--ilo-color-gray-base);
    }

    &:hover {
      background: map-get($color, "link", "background-dark", "hover");
      color: map-get($color, "link", "text-dark", "hover");
      text-decoration-thickness: 3px;
      text-decoration-color: var(--ilo-color-blue);
    }

    &:active {
      background: map-get($color, "link", "background-dark", "active");
      color: map-get($color, "link", "text-dark", "active");
      text-decoration-thickness: 3px;
      text-decoration-color: var(--ilo-color-blue-dark);
    }

    &:focus {
      background: map-get($color, "link", "background-dark", "focus");
      color: map-get($color, "link", "text-dark", "focus");
      text-decoration-thickness: 3px;
      text-decoration-color: var(--ilo-color-blue-dark);
    }
  }

  &--footer {
    @include font-styles("body-xxs");

    background: map-get($color, "link", "background-footer", "default");
    color: map-get($color, "link", "text-footer", "default");

    &:visited {
      background: map-get($color, "link", "background-footer", "visited");
      color: map-get($color, "link", "text-footer", "visited");
    }

    &:hover {
      background: map-get($color, "link", "background-footer", "hover");
      color: map-get($color, "link", "text-footer", "hover");
      text-decoration-thickness: 3px;
    }

    &:active {
      background: map-get($color, "link", "background-footer", "active");
      color: map-get($color, "link", "text-footer", "active");
      text-decoration-thickness: 3px;
    }

    &:focus {
      background: map-get($color, "link", "background-footer", "focus");
      color: map-get($color, "link", "text-footer", "focus");
      text-decoration-thickness: 3px;
    }
  }
}

// ======================================
// Cornercut
// ======================================

@mixin cornercut(
  $width: $spacing-padding-8,
  $height: $spacing-padding-5,
  $dir: "right",
  $side: "top"
) {
  @if ($side == "top") {
    @if ($dir == "right") {
      clip-path: polygon(
        0 0,
        calc(100% - $width) 0,
        100% $height,
        100% 100%,
        0 100%
      );
    }

    @if ($dir == "left") {
      clip-path: polygon($width 0, 100% 0, 100% 100%, 0 100%, 0 $height);
    }
  }

  @if ($side == "bottom") {
    @if ($dir == "right") {
      clip-path: polygon(0 0, 100% 0, calc(100% - $width) $height, 0 100%);
    }

    @if ($dir == "left") {
      clip-path: polygon(0 0, 100% 0, 100% $height, $width 100%);
    }
  }
}

// ======================================
// Dropshadow for cards
// ======================================

@mixin card-drop-shadow {
  filter: drop-shadow(0px -4px 16px rgba(30, 45, 190, 0.05))
    drop-shadow(0px 10px 20px rgba(30, 45, 190, 0.08))
    drop-shadow(0px 4px 8px rgba(30, 45, 190, 0.05))
    drop-shadow(0px 0.8px 1.6px rgba(30, 45, 190, 0.04));
}

// ======================================
// Background box for a caption icon tooltip (see Hero)
// ======================================

@mixin caption-icon-wrapper($dir: "right", $width, $height) {
  background: map-get($color, "tooltip", "dark", "background");
  height: $height;
  width: $width;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;

  &::after {
    content: "";
    position: absolute;
    top: 0;
    width: 0;
    height: 0;
    border-top: #{$height} solid transparent;

    @if ($dir == "right") {
      left: 100%;
      border-right: none;
      border-left: calc(#{$height} - 4px)
        solid
        map-get($color, "tooltip", "dark", "background");
    }

    @if ($dir == "left") {
      left: auto;
      right: 100%;
      border-left: none;
      border-right: calc(#{$height} - 4px)
        solid
        map-get($color, "tooltip", "dark", "background");
    }
  }
}

@mixin hero-grid-rows($min-height: $spacing-hero-image-min-height) {
  grid-template-rows:
    minmax($min-height, 1fr)
    $spacing-hero-tooltip-height
    $spacing-hero-card-corner-cut-height-sm
    auto;
}

// ======================================
// List with markers that don't get chopped
// off by containers with overflow: hidden;
// Applies list styles to the List component
// and also lists in RichText.
// ======================================

@mixin invincible-list($bullet-color: rgba(184, 196, 204, 1)) {
  li {
    position: relative;
    padding-inline-start: spacing(8);
    font-family: var(--ilo-fonts-copy);
    font-weight: var(--ilo-font-weight-regular);
    font-size: var(--ilo-font-size-md);
    line-height: var(--ilo-line-height-2xlg);
    margin-bottom: spacing(4);

    @include breakpoint("md") {
      font-size: var(--ilo-font-size-lg);
      margin-bottom: spacing(4);
    }
  }

  // Ordered list shows numbers
  ol {
    counter-reset: item;

    li {
      counter-increment: item;
      display: table;
    }

    li::before {
      content: counter(item) ".";
      display: table-cell;
      text-align: right;
      padding-inline-end: spacing(2);
    }
  }

  // Unordered list shows triangles
  ul {
    li {
      &::before {
        content: "";
        position: absolute;
        height: px-to-rem(24px);
        width: px-to-rem(24px);
        top: spacing(1);
        // --ilo-color-gray-base
        background-repeat: no-repeat;
        @include dataurlicon("caret_right", $bullet-color);

        // Left takes precedence in LTR layouts
        // Right takes precents in RTL layouts
        left: 0;
        right: 0;

        // We have to rotate the bullet in RTL
        [dir="rtl"] & {
          transform: rotate(180deg);
        }
      }
    }
  }
}
